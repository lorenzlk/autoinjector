name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint --if-present
    
    - name: Run tests
      run: npm test --if-present
    
    - name: Build application
      run: npm run build --if-present

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level=high
      continue-on-error: true
    
    - name: Check for known vulnerabilities
      run: npx audit-ci --moderate
      continue-on-error: true

  # Docker build step - always runs on main branch
  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: autoinjector:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Docker build completed
      run: |
        echo "✅ Docker image built successfully"
        echo "ℹ️  To enable Docker Hub push, configure DOCKER_USERNAME and DOCKER_PASSWORD secrets"

  # Optional: Docker push to registry (requires secrets)
  docker-push:
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Check Docker credentials
      id: check-docker
      run: |
        if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
          echo "has_credentials=true" >> $GITHUB_OUTPUT
          echo "✅ Docker credentials available"
        else
          echo "has_credentials=false" >> $GITHUB_OUTPUT
          echo "⚠️ Docker credentials not configured - skipping push"
        fi
    
    - name: Log in to Docker Hub
      if: steps.check-docker.outputs.has_credentials == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      if: steps.check-docker.outputs.has_credentials == 'true'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/autoinjector
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          latest
    
    - name: Build and push Docker image
      if: steps.check-docker.outputs.has_credentials == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Docker push skipped
      if: steps.check-docker.outputs.has_credentials == 'false'
      run: |
        echo "ℹ️ Docker push was skipped because credentials are not configured"
        echo "ℹ️ To enable Docker push, add DOCKER_USERNAME and DOCKER_PASSWORD secrets"

  # Optional: Deploy to production (requires secrets)
  deploy:
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Deploy to production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/autoinjector
          docker-compose pull
          docker-compose up -d
          docker system prune -f
    
    - name: Deployment completed
      run: echo "✅ Production deployment completed successfully" 